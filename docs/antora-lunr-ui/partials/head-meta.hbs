<link rel="stylesheet" href="{{uiRootPath}}/css/main.css">

{{! Mermaid support for GitHub Pages }}
<script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Mermaid
    mermaid.initialize({
      startOnLoad: false,
      theme: 'default',
      securityLevel: 'loose',
      themeVariables: {
        primaryColor: '#0066cc',
        primaryTextColor: '#ffffff',
        primaryBorderColor: '#0066cc',
        lineColor: '#333333',
        secondaryColor: '#f0f0f0',
        tertiaryColor: '#ffffff'
      },
      flowchart: {
        htmlLabels: true,
        curve: 'basis'
      },
      gitGraph: {
        showBranches: true,
        showCommitLabel: true,
        mainBranchName: 'main'
      },
      sequence: {
        actorMargin: 50,
        width: 150,
        height: 65,
        boxMargin: 10,
        boxTextMargin: 5,
        noteMargin: 10,
        messageMargin: 35
      }
    });
    
    // Find and render mermaid diagrams
    // Look for pre elements that contain mermaid syntax
    const allPreElements = document.querySelectorAll('pre');
    
    allPreElements.forEach(function(element, index) {
      const content = element.textContent || element.innerText;
      
      // Check if this is a mermaid diagram by looking for mermaid keywords
      const isMermaidDiagram = content.includes('graph ') || 
                              content.includes('sequenceDiagram') || 
                              content.includes('flowchart ') ||
                              content.includes('classDiagram') ||
                              content.includes('stateDiagram') ||
                              content.includes('journey:') ||
                              content.includes('gantt:') ||
                              content.includes('pie:') ||
                              content.includes('gitGraph:');
      
      if (isMermaidDiagram) {
        const graphDefinition = content.trim();
        const graphId = 'mermaid-diagram-' + index;
        
        // Create a container for the rendered diagram
        const container = document.createElement('div');
        container.className = 'mermaid-container';
        container.style.textAlign = 'center';
        container.style.margin = '1rem 0';
        
        // Render the diagram
        try {
          mermaid.render(graphId, graphDefinition, function(svgCode) {
            container.innerHTML = svgCode;
            element.parentNode.replaceChild(container, element);
          });
        } catch (error) {
          console.error('Mermaid rendering error:', error);
          // Fallback: show the raw code
          container.innerHTML = '<pre><code>' + graphDefinition + '</code></pre>';
          element.parentNode.replaceChild(container, element);
        }
      }
    });
  });
</script>

{{! Mermaid CSS for better styling }}
<style>
  .mermaid-container {
    text-align: center;
    margin: 1rem 0;
  }
  
  .mermaid-container svg {
    max-width: 100%;
    height: auto;
  }
  
  /* Improve diagram readability */
  .mermaid-container .node rect,
  .mermaid-container .node circle,
  .mermaid-container .node ellipse {
    fill: #f9f9f9;
    stroke: #333;
    stroke-width: 1px;
  }
  
  .mermaid-container .edgeLabel {
    background-color: #ffffff;
    padding: 2px 4px;
    border-radius: 2px;
  }
  
  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .mermaid-container .node rect,
    .mermaid-container .node circle,
    .mermaid-container .node ellipse {
      fill: #2d3748;
      stroke: #e2e8f0;
    }
    
    .mermaid-container .edgeLabel {
      background-color: #2d3748;
      color: #e2e8f0;
    }
  }
</style>
